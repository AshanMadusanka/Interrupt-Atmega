
q1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083e  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f4  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z4initv>:
uint8_t var = 0;
char clkstep[]={0x09, 0x0C, 0x06, 0x03}; //full step hex numbers 90 degree clockwise
char aclkstep[]={0x09, 0x03, 0x06, 0x0C}; //full step hex numbers 90 degree counterclockwise

void init(){
	DDRC |= 0x0f; // lower bits of PORTC declared as outputs
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x00; // B ports for input pin
  ac:	14 b8       	out	0x04, r1	; 4
  ae:	08 95       	ret

000000b0 <_Z14init_interruptv>:
}


void init_interrupt(){
	DDRD &= ~(1<<PIND2); //INT0 as an input
  b0:	52 98       	cbi	0x0a, 2	; 10
	EIMSK |= 0b00000001; //Enable External Interrupts INT0
  b2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000010; //falling edge
  b4:	e9 e6       	ldi	r30, 0x69	; 105
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	sei(); // setting global interrupt enable bit in SREG
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <__vector_1>:
}

ISR (INT0_vect) //External interrupt_zero ISR
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
			if(VALUE==1){VALUE=0;}else{VALUE=1;}
  d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VALUE>
  d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VALUE+0x1>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	29 f4       	brne	.+10     	; 0xe6 <__vector_1+0x24>
  dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <VALUE+0x1>
  e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <VALUE>
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <__vector_1+0x30>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <VALUE+0x1>
  ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <VALUE>
	
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:



int main(void)
{
	init();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4initv>
 104:	c8 e0       	ldi	r28, 0x08	; 8
 106:	d1 e0       	ldi	r29, 0x01	; 1
 108:	04 e0       	ldi	r16, 0x04	; 4
 10a:	11 e0       	ldi	r17, 0x01	; 1
	while (1)
	{
		init_interrupt();
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z14init_interruptv>
		if(VALUE==1){
 110:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VALUE>
 114:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VALUE+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	81 f4       	brne	.+32     	; 0x13c <main+0x3c>
 11c:	e4 e0       	ldi	r30, 0x04	; 4
 11e:	f1 e0       	ldi	r31, 0x01	; 1
			
			for (uint8_t j=0;j<4;j++){
				PORTC = clkstep[j]; //Rotation clockwise
 120:	81 91       	ld	r24, Z+
 122:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	80 e7       	ldi	r24, 0x70	; 112
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x2a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x34>
 134:	00 00       	nop
	while (1)
	{
		init_interrupt();
		if(VALUE==1){
			
			for (uint8_t j=0;j<4;j++){
 136:	ec 17       	cp	r30, r28
 138:	fd 07       	cpc	r31, r29
 13a:	91 f7       	brne	.-28     	; 0x120 <main+0x20>
				PORTC = clkstep[j]; //Rotation clockwise
			_delay_ms(100);}
		}
		
		if(VALUE==0){
 13c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VALUE>
 140:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VALUE+0x1>
 144:	89 2b       	or	r24, r25
 146:	11 f7       	brne	.-60     	; 0x10c <main+0xc>
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f1 e0       	ldi	r31, 0x01	; 1
			for (uint8_t k=0;k<4;k++){
				PORTC = aclkstep[k]; //Rotation anticlockwise
 14c:	81 91       	ld	r24, Z+
 14e:	88 b9       	out	0x08, r24	; 8
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x56>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x60>
 160:	00 00       	nop
				PORTC = clkstep[j]; //Rotation clockwise
			_delay_ms(100);}
		}
		
		if(VALUE==0){
			for (uint8_t k=0;k<4;k++){
 162:	e0 17       	cp	r30, r16
 164:	f1 07       	cpc	r31, r17
 166:	91 f7       	brne	.-28     	; 0x14c <main+0x4c>
 168:	d1 cf       	rjmp	.-94     	; 0x10c <main+0xc>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
